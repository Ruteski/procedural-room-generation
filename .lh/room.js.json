{
    "sourceFile": "room.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1649807608613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1649807881775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const seed = \"ruteski\";\r\n+const seed = \"a\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649807910912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const seed = \"a\";\r\n+const seed = \"1\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649845386620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const seed = \"1\";\r\n+const seed = \"OBarbaÉBrabo!\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649848290921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const seed = \"OBarbaÉBrabo!\";\r\n+const seed = \"a\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649848301757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const seed = \"a\";\r\n+const seed = \"A\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649848431249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-const seed = \"A\";\r\n+const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=\"\r\n+const seed = \"-\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649848526187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=\"\r\n-const seed = \"-\";\r\n+const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,,.;/<>:?`´~^º\"\r\n+const seed = \"\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649848891557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+const maxSeeders = 96;\r\n const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,,.;/<>:?`´~^º\"\r\n const seed = \"\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n"
                },
                {
                    "date": 1649850247996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-const maxSeeders = 96;\r\n+const utils = require(\"./utils\");\r\n+const maxSeeders = utils.getMaxSeeders(96);\r\n const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,,.;/<>:?`´~^º\"\r\n const seed = \"\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n"
                },
                {
                    "date": 1649850768025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n const maxPassagesPerRoom = 4;\r\n const maxTrapsPerRoom = 5;\r\n const maxTreasuresPerRoom = 3;\r\n const maxMobsPerRoom = 5;\r\n-const overlap = true;\r\n+const overlap = true; \r\n \r\n const START_POINT = 0;\r\n const BUILDABLE = 1;\r\n const PASSAGE = 20;\r\n"
                },
                {
                    "date": 1649850826323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n const utils = require(\"./utils\");\r\n const maxSeeders = utils.getMaxSeeders(96);\r\n-const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,,.;/<>:?`´~^º\"\r\n const seed = \"\";\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n"
                },
                {
                    "date": 1649854577076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const utils = require(\"./utils\");\r\n-const maxSeeders = utils.getMaxSeeders(96);\r\n-const seed = \"\";\r\n+const maxSeeders = utils.getMaxSeeders(95);\r\n+const seed = utils.getSeed(maxSeeders, 95);\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649855456807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,32 @@\n-const utils = require(\"./utils\");\r\n-const maxSeeders = utils.getMaxSeeders(95);\r\n-const seed = utils.getSeed(maxSeeders, 95);\r\n+function getMaxSeeders(max) {\r\n+  return parseInt(Math.floor(Math.random() * max + 1));\r\n+}\r\n+\r\n+function getSeed(seeds, max) {\r\n+  // const seeders = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\r\n+  //                  \"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\r\n+  //                  \"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"!\",\r\n+  //                  \"@\",\"#\",\"$\",\"%\",\"¨\",\"&\",\"*\",\"(\",\")\",\"_\",\"+\",\"'\",\"-\",\"=\",\"/\",\"*\",\",\",\".\",\";\",\"/\",\"<\",\r\n+  //                  \">\",\":\",\"?\",\"`\",\"´\",\"~\",\"^\",\"º\"];\r\n+\r\n+  const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,.;/<>:?`´~^º\";\r\n+\r\n+  let seed = \"\";\r\n+  let contador = 0;\r\n+  let posicao = 0;\r\n+  \r\n+  while (contador <= seeds) {\r\n+     posicao = getMaxSeeders(max);\r\n+     seed += seeders[posicao];\r\n+     contador++;\r\n+  }\r\n+\r\n+  return seed;\r\n+}\r\n+\r\n+const maxSeeders = getMaxSeeders(95);\r\n+const seed = getSeed(maxSeeders, 95);\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649855497439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n }\r\n \r\n const maxSeeders = getMaxSeeders(95);\r\n const seed = getSeed(maxSeeders, 95);\r\n+console.log(seed)\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649855540915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n \r\n   return seed;\r\n }\r\n \r\n-const maxSeeders = getMaxSeeders(95);\r\n-const seed = getSeed(maxSeeders, 95);\r\n+const maxSeeders = getMaxSeeders(94);\r\n+const seed = getSeed(maxSeeders, 94);\r\n console.log(seed)\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n"
                },
                {
                    "date": 1649855566035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,8 @@\n   return parseInt(Math.floor(Math.random() * max + 1));\r\n }\r\n \r\n function getSeed(seeds, max) {\r\n-  // const seeders = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\r\n-  //                  \"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\r\n-  //                  \"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"!\",\r\n-  //                  \"@\",\"#\",\"$\",\"%\",\"¨\",\"&\",\"*\",\"(\",\")\",\"_\",\"+\",\"'\",\"-\",\"=\",\"/\",\"*\",\",\",\".\",\";\",\"/\",\"<\",\r\n-  //                  \">\",\":\",\"?\",\"`\",\"´\",\"~\",\"^\",\"º\"];\r\n-\r\n   const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,.;/<>:?`´~^º\";\r\n \r\n   let seed = \"\";\r\n   let contador = 0;\r\n"
                },
                {
                    "date": 1649855589930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n      posicao = getMaxSeeders(max);\r\n      seed += seeders[posicao];\r\n      contador++;\r\n   }\r\n-\r\n+  console.log('seed function',seed)\r\n   return seed;\r\n }\r\n \r\n const maxSeeders = getMaxSeeders(94);\r\n const seed = getSeed(maxSeeders, 94);\r\n-console.log(seed)\r\n+console.log('seed gerado',seed)\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649855609787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n }\r\n \r\n const maxSeeders = getMaxSeeders(94);\r\n const seed = getSeed(maxSeeders, 94);\r\n-console.log('seed gerado',seed)\r\n+console.log('  seed gerado',seed)\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                },
                {
                    "date": 1649855633326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n      posicao = getMaxSeeders(max);\r\n      seed += seeders[posicao];\r\n      contador++;\r\n   }\r\n-  console.log('seed function',seed)\r\n   return seed;\r\n }\r\n \r\n const maxSeeders = getMaxSeeders(94);\r\n"
                },
                {
                    "date": 1649855673461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,5 @@\n-function getMaxSeeders(max) {\r\n-  return parseInt(Math.floor(Math.random() * max + 1));\r\n-}\r\n \r\n-function getSeed(seeds, max) {\r\n-  const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,.;/<>:?`´~^º\";\r\n-\r\n-  let seed = \"\";\r\n-  let contador = 0;\r\n-  let posicao = 0;\r\n-  \r\n-  while (contador <= seeds) {\r\n-     posicao = getMaxSeeders(max);\r\n-     seed += seeders[posicao];\r\n-     contador++;\r\n-  }\r\n-  return seed;\r\n-}\r\n-\r\n const maxSeeders = getMaxSeeders(94);\r\n const seed = getSeed(maxSeeders, 94);\r\n console.log('  seed gerado',seed)\r\n const mapHeight = 40;\r\n@@ -46,8 +28,28 @@\n \r\n const { astar, Graph } = require(\"./astar\");\r\n const seedrandom = require(\"seedrandom\");\r\n \r\n+function getMaxSeeders(max) {\r\n+  return parseInt(Math.floor(Math.random() * max + 1));\r\n+}\r\n+\r\n+function getSeed(seeds, max) {\r\n+  const seeders = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%¨&*()_+'-=/*,.;/<>:?`´~^º\";\r\n+\r\n+  let seed = \"\";\r\n+  let contador = 0;\r\n+  let posicao = 0;\r\n+  \r\n+  while (contador <= seeds) {\r\n+     posicao = getMaxSeeders(max);\r\n+     seed += seeders[posicao];\r\n+     contador++;\r\n+  }\r\n+  return seed;\r\n+}\r\n+\r\n+\r\n let rng;\r\n const initRandom = (seed) => {\r\n   if (!rng) rng = new seedrandom(seed);\r\n };\r\n"
                },
                {
                    "date": 1649855683510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,8 @@\n   }\r\n   return seed;\r\n }\r\n \r\n-\r\n let rng;\r\n const initRandom = (seed) => {\r\n   if (!rng) rng = new seedrandom(seed);\r\n };\r\n"
                },
                {
                    "date": 1649855888180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \r\n const maxSeeders = getMaxSeeders(94);\r\n const seed = getSeed(maxSeeders, 94);\r\n-console.log('  seed gerado',seed)\r\n+console.log('  seed gerado',seed);\r\n const mapHeight = 40;\r\n const mapWidth = 80;\r\n const maxRooms = 40;\r\n const minRoomSize = 3;\r\n"
                }
            ],
            "date": 1649807608613,
            "name": "Commit-0",
            "content": "const seed = \"ruteski\";\r\nconst mapHeight = 40;\r\nconst mapWidth = 80;\r\nconst maxRooms = 40;\r\nconst minRoomSize = 3;\r\nconst maxRoomSize = 10;\r\nconst maxPassagesPerRoom = 4;\r\nconst maxTrapsPerRoom = 5;\r\nconst maxTreasuresPerRoom = 3;\r\nconst maxMobsPerRoom = 5;\r\nconst overlap = true;\r\n\r\nconst START_POINT = 0;\r\nconst BUILDABLE = 1;\r\nconst PASSAGE = 20;\r\nconst PASSAGE_TRAPPED = 22;\r\nconst PASSAGE_HIDDEN = 23;\r\nconst FLOOR = 45;\r\nconst FLOOR_TRAPPED = 46;\r\nconst TREASURE = 47;\r\nconst MOB = 50;\r\nconst WALL = 55;\r\n\r\nconst DIRECTIONS = { 1: \"top\", 2: \"bottom\", 3: \"left\", 4: \"right\" };\r\n\r\nconst { astar, Graph } = require(\"./astar\");\r\nconst seedrandom = require(\"seedrandom\");\r\n\r\nlet rng;\r\nconst initRandom = (seed) => {\r\n  if (!rng) rng = new seedrandom(seed);\r\n};\r\n\r\nconst random = (min, max) => {\r\n  initRandom(seed);\r\n  return Math.floor(rng() * (max - min + 1) + min);\r\n};\r\n\r\nconst clone = (map) => {\r\n  let clone = [];\r\n  for (let i = 0; i < map.length; i++) {\r\n    clone[i] = [];\r\n    for (let j = 0; j < map[i].length; j++) {\r\n      clone[i][j] = map[i][j];\r\n    }\r\n  }\r\n  return clone;\r\n};\r\n\r\nconst print = (map) => {\r\n  for (let i = 0; i < map.length; i++) {\r\n    let row = \"\";\r\n    for (let j = 0; j < map[i].length; j++) {\r\n      if (map[i][j] === WALL) row += \"██\";\r\n      if (map[i][j] === BUILDABLE) row += \"▓▓\";\r\n      if (map[i][j] === PASSAGE) row += \"▒▒\";\r\n      if (map[i][j] === PASSAGE_TRAPPED) row += \"PT\";\r\n      if (map[i][j] === PASSAGE_HIDDEN) row += \"PH\";\r\n      if (map[i][j] === FLOOR) row += \"░░\";\r\n      if (map[i][j] === FLOOR_TRAPPED) row += \"FT\";\r\n      if (map[i][j] === TREASURE) row += \"TT\";\r\n      if (map[i][j] === MOB) row += \"MM\";\r\n      if (map[i][j] === START_POINT) row += \"SS\";\r\n    }\r\n    console.log(row);\r\n  }\r\n};\r\n\r\nconst line = (map, { start, end }) => {\r\n  for (let j = 0; j <= end.x - start.x; j++) {\r\n    for (let k = 0; k <= end.y - start.y; k++) {\r\n      map[start.y + k][start.x + j] = WALL;\r\n    }\r\n  }\r\n};\r\n\r\nconst generateClearMap = (height, width) => {\r\n  let map = [];\r\n  for (let i = 0; i < height; i++) {\r\n    map[i] = [];\r\n    for (let j = 0; j < width; j++) {\r\n      map[i][j] = BUILDABLE;\r\n    }\r\n  }\r\n  return map;\r\n};\r\n\r\nconst generateRooms = (\r\n  height,\r\n  width,\r\n  minSize,\r\n  maxSize,\r\n  { maxRooms, maxPassagesPerRoom, maxTrapsPerRoom, maxTreasuresPerRoom, maxMobsPerRoom, canOverlap = false }\r\n) => {\r\n  const rooms = [];\r\n  let count = 0;\r\n  for (let i = 0; i < maxRooms; i++) {\r\n    if (count >= 50) break;\r\n\r\n    let room = {};\r\n    room.startPoint = i === 0;\r\n    room.x = random(2, width - maxSize - 2);\r\n    room.y = random(2, height - maxSize - 2);\r\n    room.width = random(minSize, maxSize);\r\n    room.height = random(minSize, maxSize);\r\n    room.center = { x: Math.floor(room.x + room.width / 2), y: Math.floor(room.y + room.height / 2) };\r\n    room.isOverlapping = false;\r\n    room.passages = [];\r\n    room.traps = [];\r\n    room.treasures = [];\r\n    room.mobs = [];\r\n\r\n    room.equals = (otherRoom) => {\r\n      return otherRoom.x === room.x && otherRoom.y === room.y && otherRoom.width === room.width && otherRoom.height === room.height;\r\n    };\r\n\r\n    const p1 = { x: room.x - 1, y: room.y - 1 };\r\n    const p2 = { x: room.x + room.width, y: room.y - 1 };\r\n    const p3 = { x: room.x - 1, y: room.y + room.height };\r\n    const p4 = { x: room.x + room.width, y: room.y + room.height };\r\n\r\n    room.walls = {\r\n      top: { start: p1, end: p2 },\r\n      bottom: { start: p3, end: p4 },\r\n      left: { start: p1, end: p3 },\r\n      right: { start: p2, end: p4 },\r\n    };\r\n\r\n    for (let j = 0; j < rooms.length; j++) {\r\n      if (\r\n        !canOverlap &&\r\n        rooms[j].x < room.x + room.width + 2 &&\r\n        rooms[j].x + rooms[j].width > room.x - 2 &&\r\n        rooms[j].y < room.y + room.height + 2 &&\r\n        rooms[j].y + rooms[j].height > room.y - 2\r\n      ) {\r\n        room.isOverlapping = true;\r\n        i--;\r\n        count++;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!room.isOverlapping || canOverlap) {\r\n      rooms.push(room);\r\n      count = 0;\r\n\r\n      const newPassage = (p1, p2) => {\r\n        const x = p1.x === p2.x ? p1.x : random(p1.x + 1, p2.x - 1);\r\n        const y = p1.y === p2.y ? p1.y : random(p1.y + 1, p2.y - 1);\r\n        const hidden = random(0, 1) === 1;\r\n        const trapped = random(0, 1) === 1;\r\n        return { x, y, hidden, trapped };\r\n      };\r\n\r\n      const passagesCount = random(1, maxPassagesPerRoom);\r\n      for (let p = 0; p < passagesCount; p++) {\r\n        const dir = random(1, 4);\r\n        const wall = room.walls[DIRECTIONS[dir]];\r\n        const passage = newPassage(wall.start, wall.end);\r\n        room.passages.push(passage);\r\n      }\r\n\r\n      const newTrap = (rx, ry, height, width) => {\r\n        const x = random(rx, rx + width);\r\n        const y = random(ry, ry + height);\r\n        const type = random(0, 10);\r\n        return { x, y, type };\r\n      };\r\n\r\n      const trapsCount = room.startPoint ? 0 : random(0, maxTrapsPerRoom);\r\n      for (let t = 0; t < trapsCount; t++) {\r\n        const trap = newTrap(room.x, room.y, room.height, room.width);\r\n        room.traps.push(trap);\r\n      }\r\n      const newTreasure = (rx, ry, height, width) => {\r\n        const x = random(rx, rx + width);\r\n        const y = random(ry, ry + height);\r\n        const type = random(0, 10);\r\n        const goods = random(0, 10);\r\n        return { x, y, type, goods };\r\n      };\r\n\r\n      const treasuresCount = room.startPoint ? 0 : random(0, maxTreasuresPerRoom);\r\n      for (let t = 0; t < treasuresCount; t++) {\r\n        const treasure = newTreasure(room.x, room.y, room.height, room.width);\r\n        room.treasures.push(treasure);\r\n      }\r\n\r\n      const newMob = (rx, ry, height, width) => {\r\n        const x = random(rx, rx + width);\r\n        const y = random(ry, ry + height);\r\n        const type = random(0, 10);\r\n        return { x, y, type };\r\n      };\r\n      const mobsCount = room.startPoint ? 0 : random(1, maxMobsPerRoom);\r\n      for (let t = 0; t < mobsCount; t++) {\r\n        const mob = newMob(room.x, room.y, room.height, room.width);\r\n        room.mobs.push(mob);\r\n      }\r\n    }\r\n  }\r\n  return rooms;\r\n};\r\n\r\nconst addRoomsToMap = (map, rooms) => {\r\n  const roomMap = clone(map);\r\n  for (let i = 0; i < rooms.length; i++) {\r\n    for (let j = 0; j < rooms[i].height; j++) {\r\n      for (let k = 0; k < rooms[i].width; k++) {\r\n        roomMap[rooms[i].y + j][rooms[i].x + k] = FLOOR;\r\n\r\n        // if (j === 0) roomMap[rooms[i].y - 1][rooms[i].x + k] = WALL;\r\n        // if (j === rooms[i].height - 1) roomMap[rooms[i].y + j + 1][rooms[i].x + k] = WALL;\r\n        // if (k === 0) roomMap[rooms[i].y + j][rooms[i].x] = WALL;\r\n        // if (k === rooms[i].width - 1) roomMap[rooms[i].y + j][rooms[i].x + k] = WALL;\r\n      }\r\n    }\r\n\r\n    line(roomMap, rooms[i].walls.top);\r\n    line(roomMap, rooms[i].walls.bottom);\r\n    line(roomMap, rooms[i].walls.left);\r\n    line(roomMap, rooms[i].walls.right);\r\n\r\n    for (let l = 0; l < rooms[i].passages.length; l++) {\r\n      if (roomMap[rooms[i].passages[l].y][rooms[i].passages[l].x] === WALL) {\r\n        roomMap[rooms[i].passages[l].y][rooms[i].passages[l].x] = PASSAGE;\r\n\r\n        if (rooms[i].passages[l].hidden) {\r\n          roomMap[rooms[i].passages[l].y][rooms[i].passages[l].x] = PASSAGE_HIDDEN;\r\n        }\r\n        if (rooms[i].passages[l].trapped) {\r\n          roomMap[rooms[i].passages[l].y][rooms[i].passages[l].x] = PASSAGE_TRAPPED;\r\n        }\r\n      }\r\n    }\r\n    for (let l = 0; l < rooms[i].traps.length; l++) {\r\n      if (roomMap[rooms[i].traps[l].y][rooms[i].traps[l].x] === FLOOR) {\r\n        roomMap[rooms[i].traps[l].y][rooms[i].traps[l].x] = FLOOR_TRAPPED;\r\n      }\r\n    }\r\n\r\n    for (let l = 0; l < rooms[i].treasures.length; l++) {\r\n      if (roomMap[rooms[i].treasures[l].y][rooms[i].treasures[l].x] === FLOOR) {\r\n        roomMap[rooms[i].treasures[l].y][rooms[i].treasures[l].x] = TREASURE;\r\n      }\r\n    }\r\n\r\n    for (let l = 0; l < rooms[i].mobs.length; l++) {\r\n      if (roomMap[rooms[i].mobs[l].y][rooms[i].mobs[l].x] === FLOOR) {\r\n        roomMap[rooms[i].mobs[l].y][rooms[i].mobs[l].x] = MOB;\r\n      }\r\n    }\r\n\r\n    if (rooms[i].startPoint) {\r\n      roomMap[rooms[i].center.y][rooms[i].center.x] = START_POINT;\r\n    }\r\n  }\r\n  return roomMap;\r\n};\r\n\r\nconst findClosestRoomFromOtherRooms = (rooms, roomsWithPassages, point) => {\r\n  let closestRoom = null;\r\n  let closestDistance = Infinity;\r\n  for (let i = 0; i < rooms.length; i++) {\r\n    let igonreRoom = false;\r\n    for (let j = 0; j < roomsWithPassages.length; j++) {\r\n      const room = roomsWithPassages[j];\r\n      if (room.equals(rooms[i])) {\r\n        igonreRoom = true;\r\n        break;\r\n      }\r\n    }\r\n    if (igonreRoom) continue;\r\n\r\n    let distance = Math.sqrt(Math.pow(rooms[i].center.x - point.x, 2) + Math.pow(rooms[i].center.y - point.y, 2));\r\n    if (distance < closestDistance) {\r\n      closestDistance = distance;\r\n      closestRoom = rooms[i];\r\n    }\r\n  }\r\n  return closestRoom;\r\n};\r\n\r\nconst createCorridorsBetweenRooms = (map, rooms) => {\r\n  const roomMap = clone(map);\r\n  const graph = new Graph(roomMap);\r\n\r\n  for (let i = 0; i < rooms.length; i++) {\r\n    const roomsWithPassages = [];\r\n    roomsWithPassages.push(rooms[i]);\r\n    for (let j = 0; j < rooms[i].passages.length; j++) {\r\n      let closestRoom = findClosestRoomFromOtherRooms(rooms, roomsWithPassages, rooms[i].passages[j]);\r\n      roomsWithPassages.push(closestRoom);\r\n      const start = graph.grid[Math.floor(rooms[i].passages[j].y)][Math.floor(rooms[i].passages[j].x)];\r\n      const end = graph.grid[Math.floor(closestRoom.center.y)][Math.floor(closestRoom.center.x)];\r\n      const path = astar.search(graph, start, end);\r\n      for (let k = 0; k < path.length; k++) {\r\n        if (roomMap[path[k].x][path[k].y] !== FLOOR) {\r\n          roomMap[path[k].x][path[k].y] = PASSAGE;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return roomMap;\r\n};\r\n\r\nconst clearMap = generateClearMap(mapHeight, mapWidth);\r\nconst rooms = generateRooms(mapHeight, mapWidth, minRoomSize, maxRoomSize, {\r\n  maxRooms,\r\n  maxPassagesPerRoom,\r\n  maxTrapsPerRoom,\r\n  maxTreasuresPerRoom,\r\n  maxMobsPerRoom,\r\n  overlap,\r\n});\r\nconst mapWithRooms = addRoomsToMap(clearMap, rooms);\r\nconst mapWithCorridors = createCorridorsBetweenRooms(mapWithRooms, rooms);\r\nprint(mapWithCorridors);\r\n// console.log(mapWithCorridors);\r\n"
        }
    ]
}